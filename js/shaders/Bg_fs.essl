shaderSource[document.currentScript.src.split('js/shaders/')[1]] = `
	precision highp float;
	uniform vec4 lightPos[10];
	uniform vec4 lightPowerDensity[10];
	uniform samplerCube envmapTexture;
	varying vec4 rayDir;
	//varying vec2 texCoord;
	uniform mat4 quadrics[50];
	uniform vec4 brdfs[25];
	uniform vec3 camPos;
	uniform float dt;
	//uniform sampler2D colorTexture;



	float intersectionTafterClipping(vec3 eye, vec3 ray, mat4 shape, mat4 clipper){


		vec4 eyePos = vec4(eye, 1);
		vec4 rayDir = vec4(ray, 0);

		//equation to solve:
		//dot(rayDir * shape, rayDir) * t^2 + dot(rayDir*shape, eyePos) * t + dot(eyePos*shape, rayDir) * t + dot(eyePos*shape, eyePos) = 0;
		float a = dot(rayDir * shape, rayDir);
		float b = dot(rayDir*shape, eyePos) + dot(eyePos*shape, rayDir);
		float c = dot(eyePos*shape, eyePos);

		float D = b*b-4.0*a*c;
		if (D<0.0){
			return -1.0;
		}

		float t1 = (-b + sqrt(D)) / (2.0*a);
		float t2 = (-b - sqrt(D)) / (2.0*a);

		float t = min(t1,t2);

		if (t<0.0){
			t = max(t1,t2);
		}			

		float a1 = dot(rayDir * clipper, rayDir);
		float b1 = dot(rayDir * clipper, eyePos) + dot(eyePos*clipper, rayDir);
		float c1 = dot(eyePos*clipper, eyePos);

		if (a1*(pow(t,2.0))+b1*t+c1 >= 0.0){
			t=max(t1,t2);
			if (a1*(pow(t,2.0))+b1*t+c1 >= 0.0){
				return -1.0;
			}	
		}





		return t;
	}

	float intersectionT(vec3 eye, vec3 ray, mat4 shape){

		vec4 eyePos = vec4(eye, 1);
		vec4 rayDir = vec4(ray, 0);

		//equation to solve:
		//dot(rayDir * shape, rayDir) * t^2 + dot(rayDir*shape, eyePos) * t + dot(eyePos*shape, rayDir) * t + dot(eyePos*shape, eyePos) = 0;
		float a = dot(rayDir * shape, rayDir);
		float b = dot(rayDir*shape, eyePos) + dot(eyePos*shape, rayDir);
		float c = dot(eyePos*shape, eyePos);

		float D = b*b-4.0*a*c;
		if (D<0.0){
		return -1.0;
		}

		float t1 = (-b + sqrt(D)) / (2.0*a);
		float t2 = (-b - sqrt(D)) / (2.0*a);

		float t = min(t1,t2);

		if (t<0.0){
			t = max(t1,t2);
		}

		return t;
	}

	bool lookingAtShape(mat4 shape){
		float t = intersectionT(camPos, rayDir.xyz, shape);

		return t>=0.0;

	}

	bool lookingAtClippedShape(mat4 shape, mat4 clipper){
		float t = intersectionTafterClipping(camPos, rayDir.xyz, shape, clipper);

		return t>=0.0;
	}

	float bestHit(out mat4 bestA, out vec4 bestBrdf,vec3 eye, vec3 ray){

		float bestHit = 1.0/0.0;


		for(int i=0; i<50;i+=2){

			mat4 shape = quadrics[i];

			mat4 clipper = quadrics[i+1];

			float t = intersectionTafterClipping(eye, ray, shape, clipper);

			if (t < bestHit && t > 0.0){
				bestHit = t;
				bestA = quadrics[i];
				bestBrdf = brdfs[i/2];

				if (bestBrdf.r==0.0&&bestBrdf.g==1.0&&bestBrdf.b==0.0){
					vec4 intersectionPoint = vec4((camPos + rayDir.xyz*t),1);
					if(.1*sin(intersectionPoint.y*1000.0)<.001){
						bestHit=-1.0;
					}
				}
			}

		}

		if (bestHit == 1.0/0.0){
			bestHit = -1.0;
		}


		return bestHit;


	}


	void main(void) {



		vec2 rayCoords = normalize((normalize(rayDir.xyz) + vec3(0,0,1))).xy*vec2(0.5,-0.5) + vec2(0.5,0.5);

			mat4 bestA;
			vec4 bestBrdf;
			float t = bestHit(bestA,bestBrdf,camPos,rayDir.xyz);

			vec4 intersectionPoint = vec4(1.0/0.0,1.0/0.0,1.0/0.0,1);


			if (t < 0.0){
				gl_FragColor = vec4(.54,.81,.94,1);
			}else{
				vec4 myColor;



				intersectionPoint = vec4((camPos + rayDir.xyz*t),1);
				vec3 worldNormal  = normalize((bestA*intersectionPoint+intersectionPoint*bestA).xyz);
				float temp = dt;

				if(bestBrdf.r==1.0&&bestBrdf.g==1.0&&bestBrdf.b==0.0){
					if (.2*sin(intersectionPoint.x*10000.0)+.3*cos(intersectionPoint.y*1000000.0)+.1*sin(intersectionPoint.z*10000.0)<.01){
						myColor = vec4(210.0/255.0,180.0/255.0,140.0/255.0,1.0);
					}else{
						myColor=bestBrdf;
					}

				}else if (bestBrdf.x < -1.0){
					vec3 newEye = intersectionPoint.xyz+vec3(0,.1,0) ;
					vec3 newRay = reflect(normalize(rayDir.xyz), (worldNormal+(vec3(.01*sin(newEye.x*10000.0+dt*10.0),.01*cos(newEye.x*10000.0+dt*10.0),0))));


					mat4 mirroredA;
					vec4 mirroredBrdf;

					float mirrorT = bestHit(mirroredA,mirroredBrdf,newEye,newRay);
					vec4 mirrorIntersectionPoint = vec4((newEye + newRay*t),1);
					vec3 mirrorNormal  = normalize((mirroredA*mirrorIntersectionPoint+mirrorIntersectionPoint*mirroredA).xyz);

					if (mirrorT < 0.0){
						myColor = vec4(.54,.81,.94,1);
					}else if (mirroredBrdf.x < 0.0){

						if (mirrorNormal.x>0.0&&mirrorNormal.y>0.0||mirrorNormal.x<0.0&&mirrorNormal.y<0.0){
							myColor = vec4(1,0,0,1);
						}else{
							myColor = vec4(1,1,1,1);
						}
					}else{
						myColor = mirroredBrdf;
					}


				}
				else if (bestBrdf.x < 0.0){

					if (worldNormal.x>0.0&&worldNormal.y>0.0||worldNormal.x<0.0&&worldNormal.y<0.0){
						myColor = vec4(1,0,0,1);
					}else{
						myColor = vec4(1,1,1,1);
					}
				}else{
					myColor = bestBrdf;
				}


				vec3 specularColor = vec3(2,2,2);
				float shininess = 30.0;

				vec3 camDir = -camPos;
				vec3 halfway = camDir/2.0;

				vec4 L = normalize(lightPos[0]);
				vec3 R = reflect(L.xyz, worldNormal);


				vec4 specularLight = vec4(lightPowerDensity[0].rgb*specularColor*pow(dot(normalize(halfway),worldNormal), shininess),1);

				vec4 diffuseLight = vec4((lightPowerDensity[0].rgb*myColor.rgb
														*(dot(normalize(worldNormal), lightPos[0].xyz))),1);

				vec4 ambientLight = vec4(myColor.rgb*.4,1);


				//shadow code
				if (intersectionPoint.x != 1.0/0.0){
					vec3 shadowEye = intersectionPoint.xyz + vec3(0,.1,.1);
					vec3 shadowRay = normalize(lightPos[0].xyz);
					mat4 shadowA;
					vec4 shadowBrdf;

					float shadowT = bestHit(shadowA,shadowBrdf,shadowEye,shadowRay);

					if (shadowT>=0.0){
						specularLight = vec4(0,0,0,1);
						diffuseLight = vec4(0,0,0,1);
					}

				}

				gl_FragColor = ambientLight+diffuseLight+specularLight;



			}



	}


`;